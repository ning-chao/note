#变量设置与规则
-变量名称只能是字母和数字，但开头不能是数字
-等号两边不能有空格
-双引号内特殊字符如$等，可以保持原有特性，具有功能性
-单引号内特殊字符仅是纯文本
-可以使用转义字符“\”，吧特殊字符变成一般字符
-在一串命令中，想要借助额外的命令提供信息时，可用反单引号··（数字键1左边的键）
-为已有变量扩容，可使用 “$var_name”或者${var_name}紧跟要添加的内容
-将普通变量变成环境变量，可以使用export 变量名称
-取消变量使用unset，如unset myname
$?：反应=上一条命令执行情况，返回0执行正确，其他值有错误
locale -a	#查看系统支持的语系
locale	#当前系统的语系
设置LANG或者LC_ALL变量，语系变量聚会被替换
也可以通过修改/etc/locale.conf

---------------------------------------

变量内容的删除：
echo #{PATH#/usr*}	删除变量中以/usr开头的变量
#：符合文字替换的最短的那个
##：符合文字替换最长的那个
%：从后往前删除，符合文字替换的最短的那个
%%：从后往前删除，符合文字替换最长的那个

变量内容的取代与替换：
#echo {username-root}	#若username变量不存在，则输出root
#echo {username:-root}	#若username变量为空，则输出root

1、type：查询命令是否为Bash shell内置命令
type [-tpa] name
查询ls的命令类型：type -t ls
-t：将显示一下结果
file表示外部命令
alias表示别名命令
builtin表示bash内置命令
-p：若name是外部命令，才会显示完整路径
-a：会由PATH定义中，将所有name的命令找出来，包含alias
2、env、set查看常见环境变量及说明：
直接输入env或set
3、read：读取来自键盘输入的变量
read [-pt] variable
-p: 后面可以接提示字符
-t：指定等待秒数
#提示使用者在30s内输入自己的名字，并将name作为变量内容，后面可以通过$name调用
read -p "Please keyin your name: " -t 30 name
4、declare、typeset生命变量类型
declare [-aixr] variable
-a：定义数组类型
-i：定义整数类型
-x：将后面的variable变成环境变量
-r：将变量定义为readonly类型，不可修改也不能uset
#求和计算
declare -i sum=1+2+3
echo $sum
6
#将sum变成环境变量
declare -x sum
5、ulimit限制用户使用系统资源
#显示当前身份的所有限制数据数值
ulinit -a
#限制使用者只能建立10Mb一下的文件,若要接触限制就注销再次登录
ulimit -f 10240
6、alias设置别名
#查看当前系统有哪些别名
直接输入alias
#设置别名
alias lm='la -al'
#取消别名设置
unlias lm
7、history查看历史命令
history 3	#列出最近的3条历史命令
history -c	#清除当前shell中的history记录
history -w	#默认把历史记录写入`/.bash_history
!66	#执行第66条命令
!!	#执行上一条命令
!al	#执行最近以al开头的命令
8、数据流重定向
1>：将正确的数据覆盖输出到指定文件中
1>>：将正确的数据追加到指定文件中
2>：将错误的数据覆盖输出到指定文件中
2>>：将错误的数据追加到指定文件中
2>&1或者&>：将正确和错误的数据输出到同一个文件中
/dev/null：将输出信息到垃圾黑洞
#将错误的数据丢弃，将正确的数据在屏幕上显示
find /home 0name .bashrc 2> /dev/null
#将正确与错误的数据写入到一个文件中
find /home -name .bashrc > list 2>&1或者find /home -name .bashrc &> list
#利用cat创建文件
cat > test.txt
输入文件内容
Ctrl+D退出
9、cut：将一行中的信息进行拆解，取出部分我们想要的
cut -d '分隔字符' -f fileds
-d：后接以什么字符分割，与-f一起使用
-f：后接数字，取出第几段的意思
-c：以字符（characters）的单位取出固定区间
#将PATH变量取出，找出第三与第五个路径
echo $PATH | cut -d ':' -f 3,5
#取出每一行第12个字符之后的所有字符
export | cut -c 12-
#取出每一行第12到第20个字符
export | cut -c 12-20
10、grep 一行中若有我们想要的信息，就讲整行取出来
#将last中，有root出现的那一行显示出来
last | grep 'root'
#将last中，没有有root出现的显示出来
last | grep -v 'root'
#将last中，有root出现的那一行显示出来,并且只取第一栏
last | grep 'root' | cut -d ' ' -f 1
11、sort 可以以不同的形式排列
#将/etc/passwd下账号进行排序
cat /etc/passwd | sort
#将/etc/passwd内容是以“:”分开的，把账号以第三列进行排序
cat /etc/passwd | sort -t ':' -k 3
12、uniq 去除重复的行
uniq [-ic]
-i:忽略大小写
-c:进行计数
#使用last讲账号列出，仅取账号一栏并排序，显示登陆次数
last | cut -d ' ' -f 1 | sort | uniq -c
13、wc统计文件字符数，行数
wc [-lwm]
-l:仅列出行
-w:仅列出多少字（英文字母）
-m:列出有多少字符
#统计/etc/passwd中有多少字，行，字符数
cat /etc/passwd | wc
14、tee：双向重定向
tee -a file
-a:以累加的方式将数据追加到file中
#将last内容输出到last.txt中，并用cut处理只显示账号
last | tee last.txt | cut -d ' ' -f 1
15、tr：可以删除或替换一段信息中的文字
tr [-ds] set
-d:删除信息中的set字符
-s:替换掉重复的字符
#将last输出的信息中，所有的小写变大写
last | tr '[a-z]' '[A-Z]'
#将/etc/passwd的输出信息中，将冒号删除
cat /etc/passwd | tr -d ':'
#echo "hellooooooooooooo" | tr -s 'o'
hello
16、join将两个文件中相同的数据那一行，整合成一行
#将/etc/passwd和/etc/shadow有相同的数据整合成一行
join -t ':' /etc/passwd /etc/shadow | head -n 3
17、xargs：参数替代
#将所有的/etc/passwd内的账号以id查看，但查到mysql就结束命令
cut -d ':' -f 1 /etc/passwd | xargs -e'mysql -n 1 id
#找出/usr/sbin下面具有特殊权限的文件名，并使用ls -l 列出详细属性
find /usr/sbin -perm /7000 | xargs ls -l




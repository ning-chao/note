#HDFS常用命令
1. 创建目录
[-mkdir [-p] <path> ...]#在分布式文件系统上创建目录 -p,多层级创建
调用格式:hdfs dfs -mkdir(-p) /目录

2. 上传指令
[-put [-f] [-p] [-l] <localsrc> ... <dst>]   #将本地文件系统的文件上传到分布式文件系统
调用格式:hdfs dfs -put/本地文件 /hadoop
注意:
1)/hadoop是hdfs上面的路径的减缩版,全称是:hdfs://namenode的名字:分布式文件系统的端口号/hadoop           例如:hdfs://master:9000/hadoop  
2)hadoop作为文件,在操作之前是可以不存在的.
[-moveFromLocal <localsrc> ... <dst>]#将本地文件系统的文件上传到分布式文件系统
调用格式:同put
注意:这里是将本地文件剪切到分布式文件系统
[-copyFromLocal [-f] [-p] [-l] <localsrc> ... <dst>]
调用格式:同put
注意:这里是将本地文件拷贝到分布式文件系统

3. 查看指令
[-ls [-d] [-h] [-R] [<path> ...]]#查看分布式文件系统的目录里内容
调用格式:hdfs dfs -ls/
[-cat [-ignoreCrc] <src> ...]  #查看分布式文件系统的文件内容
调用格式:hdfs dfs -cat/xxx.txt
[-tail [-f] <file>]#查看分布式文件系统的文件内容
调用格式:hdfs dfs -tail/xxx.txt
注意:默认最多查看1000行

4. 下载指令
[-copyToLocal [-p] [-ignoreCrc] [-crc] <src> ... <localdst>]
调用格式:hdfs dfs -copyToLocal/hdfs上的路径   /本地路径   例如:hdfs dfs -copyToLocal/hadoop /root/hadooptest
注意:
1)本地路径的文件夹可以不存在
2)这里是将hadoop整体拷贝到线下路径中
[-moveToLocal <src> <localdst>]
注意:从hdfs的某个路径将数据剪切到本地,已经被遗弃了.不能使用.
[-get [-p] [-ignoreCrc] [-crc] <src> ... <localdst>]
调用格式:同copyToLocal
​
5. 删除指令
[-rm [-f] [-r|-R] [-skipTrash] <src> ...]
调用格式:hdfs dfs -rm-r/hadoop
注意:如果删除文件夹需要加-r
[-rmdir [--ignore-fail-on-non-empty] <dir> ...]
调用格式:hdfs dfs -rmdir/hadoop
注意:hadoop必须是空文件夹,如果非空必须使用rm删除

6. 查看磁盘利用率和文件大小
[-df [-h] [<path> ...]] 查看分布式系统的磁盘使用情况
调用格式:hdfs dfs -df/
[-du [-s] [-h] <path> ...]#查看分布式系统上当前路径下文件的情况-h：human 以人类可读的方式显示
调用格式:hdfs dfs -du/hadoop
​
7. 向分布式文件系统中的文件里追加内容
[-appendToFile <localsrc> ... <dst>]
调用格式:hdfs dfs -appendToFile本地文件     hdfs上的文件
注意:不支持在中间随意增删改操作

8. 修改权限的,跟本地的操作一致,-R是让子目录或文件也进行相应的修改
[-chgrp [-R] GROUP PATH...]
[-chmod [-R] <MODE[,MODE]... | OCTALMODE> PATH...]
[-chown [-R] [OWNER][:[GROUP]] PATH...]
​
9. 修改文件的副本数
[-setrep [-R] [-w] <rep> <path> ...]
调用格式:hadoop fs -setrep 3/   将hdfs根目录及子目录下的内容设置成3个副本
注意:当设置的副本数量与初始化时默认的副本数量不一致时,集群会作出反应,比原来多了会自动进行复制.

10. 查看文件的状态
hdfs dfs [generic options] -stat[format] <path> ...
命令的作用:当向hdfs上写文件时，可以通过dfs.blocksize配置项来设置文件的block的大小。这就导致了hdfs上的不同的文件block的大小是不相同的。有时候想知道hdfs上某个文件的block大小，可以预先估算一下计算的task的个数。stat的意义：可以查看文件的一些属性。
调用格式:hdfs dfs -stat[format] 文件路径
format的形式：
%b：打印文件的大小（目录大小为0）
%n：打印文件名
%o：打印block的size
%r：打印副本数
%y：utc时间 yyyy-MM-dd HH:mm:ss
%Y：打印自1970年1月1日以来的utc的微秒数
%F：目录打印directory，文件打印regular file
注意:
1)当使用-stat命令但不指定format时，只打印创建时间，相当于%y
2)-stat 后面只跟目录,%r,%o等打印的都是0,只有文件才有副本和大小

11. 测试  
hdfs dfs [generic options] -test-[defsz] <path>    
参数说明: -e:文件是否存在 存在返回0    -z:文件是否为空 为空返回0   -d:是否是路径(目录) ,是返回0
调用格式:hdfs dfs -test-d文件 
实例:hdfs dfs -test-d/shelldata/111.txt && echo"OK"|| echo"no"
解释:测试当前的内容是否是文件夹 ,如果是返回ok,如果不是返回no

12. 创建空文件
hdfs dfs [generic options] -touchz<path> ...   
调用格式:hdfs dfs touchz /hadooptest.txt

13. 显示当前文件夹及子文件夹的数量   子文件的数量以及 总大小
hdfs dfs [generic options] -count[-q] [-h] <path> ...   
调用格式:hdfs dfs  -count  /hadoop

14. 合并下载
hdfs dfs [generic options] -getmerge[-nl] <src> <localdst>
调用格式:hdfs dfs -getmergehdfs上面的路径   本地的路径    
实例:hdfs dfs -getmergo/hadoopdata/*.xml /root/test.test

15. 移动hdfs中的文件（更名）
hdfs dfds [generic options] -mv<src> ... <dst>   
调用格式:hdfs dfs -mv/hdfs的路径1 /hdfs的另一个路径2    
实例:hfds dfs -mv/aaa   /bbb 这里是将aaa整体移动到bbb中

16. 复制hdfs中的文件到hdfs的另一个目录
hdfs dfs [generic options] -cp[-f] [-p | -p[topax]] <src> ... <dst>
调用格式:hdfs dfs -cp/hdfs路径_1 /hdfs路径_2

----------------------------------------------------------------------------

#Hadoop中的一些使用的端口
namenode 9870 	默认情况下是NameNode的webUI界面，可以看到file system中的信息
resourcemanager 8088  	ResourceManager WebUI界面


Hadoop端口：
分类		应用		hadoop2.x		hadoop3.x
NN port		namenode	8020			9820
			HTTP UI		50070			9870
			HTTPS UI	50470			9871
SNN port	HTTP UI		50091			9869
			HTTPS UI	50090			9868			
DN port		DN PIC		50020			9867
			DN			50010			9866
			HTTP UI		50075			9864
			HTTPS UI	50475			9865
YARN port	YARN UI		8088			8088


HBase端口：
HMaster		IPC			60000
			HTTP UI		60010
RS			IPC			60020
			HTTP UI		60030
			
Zookeeper端口;
2181	对cline端提供服务
2888	集群内机器通讯使用（Leader监听此端口）
3888	选举leader使用

Elastcsearch端口：
9200	WEB	UI		
9300 	集群中的节点间彼此通信


HDFS守护程序是NameNode，SecondaryNameNode和DataNode
YARN守护程序是ResourceManager，NodeManager和WebAppProxy
HBase角色：Master和RegionServer，守护进程为HMaster、HRegionServer
Zookeeper角色：Leader、Follower、Observer，守护进程为QuorumPeerMain
elasticsearch集群中每个节点都有成为主节点的资格，也都存储数据，即双重角色，真正的主节点是由多个具有主节点资格的节点进行选举产生的。

Daemon				Environment Variable
NameNode			HDFS_NAMENODE_OPTS
DataNode			HDFS_DATANODE_OPTS
Secondary NameNode	HDFS_SECONDARYNAMENODE_OPTS
ResourceManager		YARN_RESOURCEMANAGER_OPTS
NodeManager			YARN_NODEMANAGER_OPTS
WebAppProxy			YARN_PROXYSERVER_OPTS
Map Reduce Job History Server		MAPRED_HISTORYSERVER_OPTS

设置Java堆内存，在 hadoop-env.sh中配置
export HDFS_NAMENODE_OPTS="-XX:+UseParallelGC -Xmx4g"

#配置环境变量
HADOOP_HOME=/path/to/hadoop
export HADOOP_HOME


etc/hadoop/core-site.xml
fs.defaultFS			NameNode URI	hdfs://host:port/
io.file.buffer.size		131072			Size of read/write buffer used in SequenceFiles.

#hdfs-site.xml主要配置namenode和datanode
etc/hadoop/hdfs-site.xml
dfs.namenode.name.dir			Path on the local filesystem where the NameNode stores the namespace and transactions logs persistently.	
dfs.hosts / 					dfs.hosts.exclude	List of permitted/excluded DataNodes.	
dfs.blocksize					268435456	HDFS blocksize of 256MB for large file-systems.
dfs.namenode.handler.count		100			More NameNode server threads to handle RPCs from large number of DataNodes.

#yarn-site.xml主要配置ResourceManager和NodeManager

ResourceManager和NodeManager的配置：
yarn.acl.enable		true/false
yarn.admin.acl		Admin ACL
yarn.log-aggregation-enable		false

ResourceManager的配置：
yarn.scheduler.minimum-allocation-mb	在资源管理器中分配给每个容器请求的最小内存限制。	以MB为单位
yarn.scheduler.maximum-allocation-mb	在资源管理器中分配给每个容器请求的最大内存限制。	以MB为单位

NodeManager的配置：
yarn.nodemanager.resource.memory-mb		资源，即给定NodeManager的可用物理内存（以MB为单位）	
yarn.nodemanager.vmem-pmem-ratio		任务的虚拟内存使用率可能超过物理内存的最大比率	
yarn.nodemanager.local-dirs				用逗号分隔的本地文件系统上写入中间数据的路径列表	

mapred-site.xml
MapReduce应用程序的配置：




inode--Linux文件存储方式
MySQL备份机制，增量与全量
nginx日志统计IP
awk使用方法
各raid级别之间的差异
超过4T盘如何挂载
MySQL进程达到300%是什么原因
	可能原因是这张表的插入和删除过慢导致的。后面删掉一些没有用的日志，临时解决了这个问题
MySQL如何设置grant权限、忘记密码如何处理、musql.user表中有哪些数据
ftp的的主动模式说被动模式及对应应的端口号
本地yum源搭建方式、更新索引
Hadoop环境搭建方式
docker如何进入容器
python2与python3的区别
软连接与硬链接区别
python装饰器怎么理解

Oracle部署方式
MySQL部署方式
nginx作用
本地yum源搭建方式




core-site.xml
<configuration>
        <!--定义namenode地址,默认9000表示datanode将发送心跳到namenode的端口>
        <property>
                <name>fs.defaultFS</name>
                <value>hdfs://localhost:9000</value>
        </property>
        <!--修改用于hadoop存储数据的默认位置-->
        <property>
                <name>hadoop.tmp.dir</name>
                <value>/data/hadoop</value>
        </properyt>
</configuration>





主动模式（窗口模式）：
1、客户端开启  > 1024 的一个端口连接服务器端的21号端口，确认server是否提供 ftp 服务
2、client开启 > 1024 的另外的一个端口告诉server
3、server端用自己的 20 号端口将数据送达到client告诉它的端口处

被动模式（linux 默认）
1、客户端开启  > 1024 的一个端口连接服务器端的21号端口，确认server是否提供 ftp 服务
2、server开启 > 1024 的另外的一个端口告诉client
3、client 端开启 >1024 的另外一个端口找服务端告诉他的端口，将数据取回去






挂载磁盘
https://www.linuxprobe.com/linux-docker-mount.html

1、查看系统分区，获取新添加的磁盘
fdisk -l
2、对新加的磁盘进行分区
fdisk /dev/sdb
n：创建分区
p：创建主分区，可以选择p或者e
1：设置分区号，可以选择1-4的数字
分区的大小如果不想设置，可以直接enter进入下一步，会按照默认的大小设置。
p：打印当前分区表，我们可以看到分区之后的信息
w：保存更新
3、格式化分区
mkfs.ext4 /dev/sdb1
4、创建挂载点
mkdir /disk01
5、将挂载点添加到开机启动挂载
echo “/dev/sdb1 /disk01 ext4 defaults 0 0” >> /etc/fstab
挂载所有分区
mount -a
然后执行命令df -h查看磁盘的挂载情况，dev/sdb1已经挂载成功。


Tomcat重要参数调优
https://www.linuxprobe.com/tomcat-import-tiao.html

一. 3个参数搞定并发配置
maxThreads -- tomcat接收客户端请求的最大线程数，也就是同时处理任务的个数，它的默认大小为200;一般来说，在高并发的I/O密集型应用中，这个值设置为1000左右比较合理
maxConnections 这个参数是指在同一时间，tomcat能够接受的最大连接数。对于Java的阻塞式BIO，默认值是maxthreads的值;如果在BIO模式使用定制的Executor执行器，默认值将是执行器中maxThreads的值。对于Java 新的NIO模式，maxConnections 默认值是10000，所以这个参数我们一般保持不动即可
acceptCount -- 当线程数量达到上面设置的值，所能接受的最大排队数量。超过了这个值，请求就会被拒绝。我一般会设置成和maxThreads设置成一样大的
简单说明一下上面三个参数的关系：

系统能够保持的连接数
maxConnections+acceptCount，区别是maxConnections中的连接可以被调度处理;acceptCount中的连接只能等待排队

系统能处理的请求数
maxThreads的大小，实际能够工作的线程数量。
幸福指数：maxThreads > maxConnections > acceptCount。
现在有些文章还充斥着maxProcessors和minProcessors。但这两个参数，从Tomcat5开始被deprecated，从6开始就彻底没了。
只能说你看到的这些文章，可能真的是不懂技术的运营发表的。
以8为代表，具体配置参数可以参见：
https://tomcat.apache.org/tomcat-8.0-doc/config/http.html

二、线程配置
在并发配置方面，可以看到我们只有minSpareThreads，但是却没有maxSpareThreads。这是因为，从Tomcat 6开始增加Executor 节点，这个参数已经没用了。

由于线程是一个池子，所以它的配置，满足池的一切特点。

参照：https://tomcat.apache.org/tomcat-8.0-doc/config/executor.html

namePrefix -- 每个新开线程的名称前缀
maxThreads -- 线程池中的最大线程数
minSpareThreads -- 一直处于活跃状态的线程数
maxIdleTime -- 线程的空闲时间，在超过空闲时间时这些线程则会被销毁
threadPriority -- 线程池中线程的优先级，默认为5
三、搞定JVM配置
tomcat是Java应用，所以JVM的配置同样会影响它的性能。比较重要的配置参数如下。

3.1、内存区域大小
首先要调整的，就是各个分区的大小，不过这也要分垃圾回收器，我们仅看一下一些全局的参数。

-XX:+UseG1GC 首先，要指定JVM使用的垃圾回收器。尽量不要靠默认值去保证，要显式的指定一个。
-Xmx 设置堆的最大值，一般为操作系统的2/3大小。
-Xms 设置堆的初始值，一般设置成和Xmx一样的大小来避免动态扩容。
-Xmn 年轻代大小，默认新生代占堆大小的1/3。高并发快消亡场景可适当加大这个区域。对半，或者更多，都是可以的。但是在G1下，就不用再设置这个值了，它会自动调整。
-XX:MaxMetaspaceSize 限制元空间的大小，一般256M足够。这一般和初始大小**-XX:MetaspaceSize**设置成一样的。
-XX:MaxDirectMemorySize 设置直接内存的最大值，限制通过DirectByteBuffer申请的内存。
-XX:ReservedCodeCacheSize 设置JIT编译后的代码存放区大小，如果观察到这个值有限制，可以适当调大，一般够用。
-Xss 设置栈的大小，默认为1M，已经足够用了。
3.2、内存调优
-XX:+AlwaysPreTouch 启动时就把参数里说好了的内存全部初始化，启动时间会慢一些，但运行速度会增加。
-XX:SurvivorRatio 默认值为8。表示伊甸区和幸存区的比例。
-XX:MaxTenuringThreshold 这个值在CMS下默认为6，G1下默认为15。这个值和我们前面提到的对象提升有关，改动效果会比较明显。对象的年龄分布可以使用**-XX:+PrintTenuringDistribution**打印，如果后面几代的大小总是差不多，证明过了某个年龄后的对象总能晋升到老生代，就可以把晋升阈值设小。
PretenureSizeThreshold 超过一定大小的对象，将直接在老年代分配。不过这个参数用的不是很多。
3.3、垃圾回收器优化
G1垃圾回收器

-XX:MaxGCPauseMillis 设置目标停顿时间，G1会尽力达成。
-XX:G1HeapRegionSize 设置小堆区大小。这个值为2的次幂，不要太大，也不要太小。如果是在不知道如何设置，保持默认。
-XX:InitiatingHeapOccupancyPercent 当整个堆内存使用达到一定比例(默认是45%)，并发标记阶段就会被启动。
-XX:ConcGCThreads 并发垃圾收集器使用的线程数量。默认值随JVM运行的平台不同而不同。不建议修改。
四、其他重要配置
再看几个在Connector中配置的重要参数。

enableLookups -- 调用request、getRemoteHost()执行DNS查询，以返回远程主机的主机名，如果设置为false，则直接返回IP地址。这个要根据需求来
URIEncoding -- 用于解码URL的字符编码，没有指定默认值为ISO-8859-1
connectionTimeout -- 连接的超时时间(以毫秒为单位)
redirectPort -- 指定服务器正在处理http请求时收到了一个SSL传输请求后重定向的端口号
五、总结
tomcat是最常用的web容器，提供了数百个配置参数。但我们在平常的使用中，没必要把所有的参数都弄清楚，只关注最重要的就可以了。




iptable常用配置

iptables [-t 表名] 选项 [链名] [条件] [-j 控制类型]

-P 设置默认策略:iptables -P INPUT (DROP|ACCEPT)
-F 清空规则链
-L 查看规则链
-A 在规则链的末尾加入新规则
-I num 在规则链的头部加入新规则
-D num 删除某一条规则
-s 匹配来源地址IP/MASK，加叹号"!"表示除这个IP外。
-d 匹配目标地址
-i 网卡名称 匹配从这块网卡流入的数据
-o 网卡名称 匹配从这块网卡流出的数据
-p 匹配协议,如tcp,udp,icmp
--dport num 匹配目标端口号
--sport num 匹配来源端口号

1. 删除已有规则
在开始创建iptables规则之前，你也许需要删除已有规则。命令如下：
iptables -F
(or)
iptables –flush

2.设置链的默认策略
链的默认政策设置为”ACCEPT”（接受），若要将INPUT,FORWARD,OUTPUT链设置成”DROP”（拒绝），命令如下：

iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT DROP
当INPUT链和OUTPUT链都设置成DROP时，对于每一个防火墙规则，我们都应该定义两个规则。例如：一个传入另一个传出。在下面所有的例子中，由于我们已将DROP设置成INPUT链和OUTPUT链的默认策略，每种情况我们都将制定两条规则。
当然，如果你相信你的内部用户,则可以省略上面的最后一行。例如：默认不丢弃所有出站的数据包。在这种情况下,对于每一个防火墙规则要求,你只需要制定一个规则——只对进站的数据包制定规则。

3. 阻止指定IP地址

例：丢弃来自IP地址x.x.x.x的包

BLOCK_THIS_IP="x.x.x.x"
iptables -A INPUT -s "$BLOCK_THIS_IP" -j DROP
注：当你在log里发现来自某ip地址的异常记录，可以通过此命令暂时阻止该地址的访问以做更深入分析

例：阻止来自IP地址x.x.x.x eth0 tcp的包

iptables -A INPUT -i eth0 -s "$BLOCK_THIS_IP" -j DROP
iptables -A INPUT -i eth0 -p tcp -s "$BLOCK_THIS_IP" -j DROP
4. 允许所有SSH的连接请求

例：允许所有来自外部的SSH连接请求，即只允许进入eth0接口，并且目标端口为22的数据包

iptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT
5. 仅允许来自指定网络的SSH连接请求

例：仅允许来自于192.168.100.0/24域的用户的ssh连接请求

iptables -A INPUT -i eth0 -p tcp -s 192.168.100.0/24 --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT
6.允许http和https的连接请求

例：允许所有来自web - http的连接请求

iptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT
例：允许所有来自web - https的连接请求

iptables -A INPUT -i eth0 -p tcp --dport 443 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp --sport 443 -m state --state ESTABLISHED -j ACCEPT
7. 使用multiport 将多个规则结合在一起

允许多个端口从外界连入，除了为每个端口都写一条独立的规则外，我们可以用multiport将其组合成一条规则。如下所示：

例：允许所有ssh,http,https的流量访问

iptables -A INPUT -i eth0 -p tcp -m multiport --dports 22,80,443 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp -m multiport --sports 22,80,443 -m state --state ESTABLISHED -j ACCEPT
8. 允许从本地发起的SSH请求

iptables -A OUTPUT -o eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A INPUT -i eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT
请注意,这与允许ssh连入的规则略有不同。本例在OUTPUT链上，我们允许NEW和ESTABLISHED状态。在INPUT链上，我们只允许ESTABLISHED状态。ssh连入的规则与之相反。

9. 仅允许从本地发起到一个指定的网络域的SSH请求

例：仅允许从内部连接到网域192.168.100.0/24

iptables -A OUTPUT -o eth0 -p tcp -d 192.168.100.0/24 --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A INPUT -i eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT
10. 允许从本地发起的HTTPS连接请求

下面的规则允许输出安全的网络流量。如果你想允许用户访问互联网，这是非常有必要的。在服务器上，这些规则能让你使用wget从外部下载一些文件

iptables -A OUTPUT -o eth0 -p tcp --dport 443 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A INPUT -i eth0 -p tcp --sport 443 -m state --state ESTABLISHED -j ACCEPT
注：对于HTTP web流量的外联请求，只需要将上述命令中的端口从443改成80即可。

11. 负载平衡传入的网络流量

使用iptables可以实现传入web流量的负载均衡，我们可以传入web流量负载平衡使用iptables防火墙规则。
例：使用iptables nth将HTTPS流量负载平衡至三个不同的ip地址。

iptables -A PREROUTING -i eth0 -p tcp --dport 443 -m state --state NEW -m nth --counter 0 --every 3 --packet 0 -j DNAT --to-destination 192.168.1.101:443
iptables -A PREROUTING -i eth0 -p tcp --dport 443 -m state --state NEW -m nth --counter 0 --every 3 --packet 1 -j DNAT --to-destination 192.168.1.102:443
iptables -A PREROUTING -i eth0 -p tcp --dport 443 -m state --state NEW -m nth --counter 0 --every 3 --packet 2 -j DNAT --to-destination 192.168.1.103:443
12. 允许外部主机ping内部主机

iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT
iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT
13. 允许内部主机ping外部主机

iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
iptables -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT
14. 允许回环访问

例：在服务器上允许127.0.0.1回环访问。

iptables -A INPUT -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT
15. 允许内部网络域外部网络的通信

防火墙服务器上的其中一个网卡连接到外部，另一个网卡连接到内部服务器，使用以下规则允许内部网络与外部网络的通信。此例中，eth1连接到外部网络(互联网)，eth0连接到内部网络(例如:192.168.1.x)。

iptables -A FORWARD -i eth0 -o eth1 -j ACCEPT
16. 允许出站的DNS连接

iptables -A OUTPUT -p udp -o eth0 --dport 53 -j ACCEPT
iptables -A INPUT -p udp -i eth0 --sport 53 -j ACCEPT
17. 允许NIS连接

如果你使用NIS管理用户帐户，你需要允许NIS连接。如果你不允许NIS相关的ypbind连接请求，即使SSH连接请求已被允许，用户仍然无法登录。NIS的端口是动态的，先使用命令rpcinfo –p来知道端口号，此例中为853和850端口。

rpcinfo -p | grep ypbind
例：允许来自111端口以及ypbind使用端口的连接请求

iptables -A INPUT -p tcp --dport 111 -j ACCEPT
iptables -A INPUT -p udp --dport 111 -j ACCEPT
iptables -A INPUT -p tcp --dport 853 -j ACCEPT
iptables -A INPUT -p udp --dport 853 -j ACCEPT
iptables -A INPUT -p tcp --dport 850 -j ACCEPT
iptables -A INPUT -p udp --dport 850 -j ACCEPT
注：当你重启ypbind之后端口将不同，上述命令将无效。有两种解决方案：1）使用你NIS的静态IP 2）编写shell脚本通过“rpcinfo - p”命令自动获取动态端口号,并在上述iptables规则中使用。

18. 允许来自指定网络的rsync连接请求

例：允许来自网络192.168.101.0/24的rsync连接请求

iptables -A INPUT -i eth0 -p tcp -s 192.168.101.0/24 --dport 873 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp --sport 873 -m state --state ESTABLISHED -j ACCEPT
19. 允许来自指定网络的MySQL连接请求

很多情况下，MySQL数据库与web服务跑在同一台服务器上。有时候我们仅希望DBA和开发人员从内部网络（192.168.100.0/24）直接登录数据库，可尝试以下命令：

iptables -A INPUT -i eth0 -p tcp -s 192.168.100.0/24 --dport 3306 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp --sport 3306 -m state --state ESTABLISHED -j ACCEPT
20. 允许Sendmail, Postfix邮件服务

Sendmail和postfix都使用了25端口，因此我们只需要允许来自25端口的连接请求即可。

iptables -A INPUT -i eth0 -p tcp --dport 25 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp --sport 25 -m state --state ESTABLISHED -j ACCEPT
21. 允许IMAP和IMAPS

例：允许IMAP/IMAP2流量，端口为143

iptables -A INPUT -i eth0 -p tcp --dport 143 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp --sport 143 -m state --state ESTABLISHED -j ACCEPT
例：允许IMAPS流量，端口为993

iptables -A INPUT -i eth0 -p tcp --dport 993 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp --sport 993 -m state --state ESTABLISHED -j ACCEPT
22. 允许POP3和POP3S

例：允许POP3访问

iptables -A INPUT -i eth0 -p tcp --dport 110 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp --sport 110 -m state --state ESTABLISHED -j ACCEPT
例：允许POP3S访问

iptables -A INPUT -i eth0 -p tcp --dport 995 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp --sport 995 -m state --state ESTABLISHED -j ACCEPT
23. 防止DoS攻击

iptables -A INPUT -p tcp --dport 80 -m limit --limit 25/minute --limit-burst 100 -j ACCEPT
上述例子中：
-m limit: 启用limit扩展
–limit 25/minute: 允许最多每分钟25个连接（根据需求更改）。
–limit-burst 100: 只有当连接达到limit-burst水平(此例为100)时才启用上述limit/minute限制。

24. 端口转发

例：将来自422端口的流量全部转到22端口。

这意味着我们既能通过422端口又能通过22端口进行ssh连接。启用DNAT转发。

iptables -t nat -A PREROUTING -p tcp -d 192.168.102.37 --dport 422 -j DNAT --to 192.168.102.37:22
除此之外，还需要允许连接到422端口的请求

iptables -A INPUT -i eth0 -p tcp --dport 422 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp --sport 422 -m state --state ESTABLISHED -j ACCEPT
25. 记录丢弃的数据表

第一步：新建名为LOGGING的链

iptables -N LOGGING
第二步：将所有来自INPUT链中的数据包跳转到LOGGING链中

iptables -A INPUT -j LOGGING
第三步：为这些包自定义个前缀，命名为”IPTables Packet Dropped”

iptables -A LOGGING -m limit --limit 2/min -j LOG --log-prefix "IPTables Packet Dropped: " --log-level 7
第四步：丢弃这些数据包

iptables -A LOGGING -j DROP



Linux 系统的安全加固

账户安全加固
	1）控制系统账户：cat /etc/passwd
	2）修改口令生存期：cat /etc/login.defs | grep "PASS"
		PASS_MAX_DAYS   90      # 新建用户密码最长使用天数
		PASS_MIN_DAYS   0       # 新建用户密码最短使用天数
		PASS_MIN_LEN    7       # 新建用户密码到期提示天数
		PASS_WARN_AGE   10      # 最小密码长度
	3）设置口令复杂度：cat /etc/pam.d/system-auth
		password    required pam_cracklib.so try_first_pass retry=3 dcredit=-1 lcredit=-1 ucredit=-1 ocredit=-1 minlen=10
	4）限制登录超时：限制用户登陆成功后的等待时间，当用户终端无操作时则默认断开连接。
		在/etc/profile添加:
		TMOUT=300
		export TMOUT
	5）限制TTY尝试次数：
	6）修改SSH远程端口：vim /etc/ssh/sshd_config
	7）
	
文件权限加固

https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/
https://mirrors.tuna.tsinghua.edu.cn/centos/7/isos/x86_64/
https://mirrors.tuna.tsinghua.edu.cn/apache/hbase/
https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/

firewall-cmd

流量转发命令格式为
firewall-cmd --permanent --zone=<区域> --add-forward-port=port=<源端口号>:proto=<协议>:toport=<目标端口号>:toaddr=<目标IP地址>
firewall-cmd --permanent --zone=public --add-forward-port=port=888:proto=tcp:toport=22:toaddr=192.168.10.10